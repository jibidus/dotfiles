[filter "media"]
	required = true
	clean = git media clean %f
	smudge = git media smudge %f
[user]
	name = Jean-Baptiste Mille
	email = jean-baptiste.mille@aselta.com
[alias]
	ec = config --global -e
	st = status --short --branch
	pushf = push --force-with-lease
	amend = commit --amend
	oneline = log --pretty=oneline --abbrev-commit --graph
	logf = log --name-only --oneline
	logg = log --graph --abbrev-commit --decorate --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)'
	undo = reset --soft HEAD^
	continue = rebase --continue
	aac = !git add . && git rebase --continue
	up = !git pull --rebase $@
	upmaster = !git com && git up && git co -
	upmain = !git co main && git up && git co -
	updev = !git co develop && git up && git co -
	upnext = !git co next && git up && git co -
	upsyncd = !git co feature/syncd && git up && git co -
	prune = "!f() { git remote prune origin; }; f"
	stashow = stash show -u
	stashp = stash save -p --no-keep-index
	stashpop = stash pop --index
	co = checkout
	cob = checkout -b
	com = checkout master
	codev = checkout dev
	cm = !git add -A && git commit -m
	wip = !git add -A && git commit -m 'WIP'
	# (Branch CLEAN) Remove local branches removed remotely
	bclean = "!f() { git fetch --prune && git branch -vv | grep '\\[.*: gone\\]' | cut -d ' ' -f 3 | xargs -L1 git branch -D; }; f"
	mad = !BRANCH=${1-$(git symbolic-ref --short HEAD)} && git checkout $BRANCH && git rebase ${2-master} && git checkout ${2-master} && git merge --no-ff $BRANCH && git branch -d $BRANCH
	squash = "!f() { git rebase -i --autosquash ${1-master}; }; f"
	fixup = "!f() { COMMIT=${1-$(git suggest-fixup-commit)} && echo Fixup to $COMMIT... && git commit --fixup $COMMIT; }; f"
	unadd = reset HEAD
	rename = !old_branch=$(git symbolic-ref --short HEAD) && git branch -m $1 && git push origin --set-upstream $1 && git push origin :$old_branch
	sfc = !git status -s --untracked-files=no --porcelain |grep ^[MDR] |cut -c 4- |cut -d ' ' -f 1 |xargs -L1 git log --oneline --abbrev-commit -n 1 --follow -- 
	suggest-fixup-commit = !git status -s --untracked-files=no --porcelain |grep ^[MDR] |cut -c 4- |cut -d ' ' -f 1 |xargs -L1 git log --pretty=format:%h -n 1 --follow -- 
	pushremote = push -u origin HEAD
        pr = !git pushremote && hub pull-request
	delete = "!f() { git branch -D $1 && git fetch && git push origin :$1; }; f"
	log-files-only = log --name-status
	copr = "!f() { git fetch origin refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
	pushgerrit = push origin HEAD:refs/for/master
	pushgerritprivate = push origin HEAD:refs/for/master%private
[push]
	default = simple
[core]
	excludesFile = ~/.gitignore
	editor = vim
	hooksPath = /Users/jbmille/.githooks
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
[filter "hawser"]
	clean = git hawser clean %f
	smudge = git hawser smudge %f
	required = true
[color]
	ui = auto
[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
[remote "origin"]
[status]
	showUntrackedFiles = all
[branch]
	autosetuprebase = always
[pull]
	rebase = true
